#!/usr/bin/env ruby

require 'byebug'
require 'aws-sdk'
require 'chamber'
require 'queue_workers/aws_environment'
require 'queue_workers/dynamodb'

class NullLogger
  def debug(*_); end
end

class UpdateDyanmodbJob
  include DynamoDBAccess
  include DynamoDBJobAccess

  attr_accessor :args, :job_id, :aws_env

  def initialize
    @args = ARGV
    @environment_name = ENV.fetch('GS_ENV') { raise 'You must provide GS_ENV' }
  end

  def run!
    puts helps and return if args.empty?
    setup_aws
    update_job
    send_message_to_sqs
  end

  private

  def setup_aws
    # environment_name = ENV.fetch('GS_ENV') { raise 'You must provide GS_ENV' }
    Chamber.load namespaces: @environment_name
    @aws_env = AWSEnvironment.new(Chamber.env.aws_environment)
    @ddb = Aws::DynamoDB::Client.new
  end

  def job_id
    args.first
  end

  def job
    job = ddb_get_job(job_id)
  end

  def update_job
    current_action = '5_generate'
    ddb_set_job_current_action(job_id, current_action, report_json_amended: 'spa')
    puts "set current_action to: #{current_action}"
  end

  def queue_name
    "gs-#{@environment_name}-reportgen-work-generate"
  end

  def send_message_to_sqs
    sqs = Aws::SQS::Client.new

    queue_url = "https://sqs.eu-west-1.amazonaws.com/826369869390/#{queue_name}"
    data = {
      'report_json_location' => 'spa',
      'report_json' => job_id
    }

    attributes = {
      'job_id' => {
        string_value: job_id,
        data_type: 'String'
      },
      'message_type' => {
        string_value: 'SPAReportGenerationRequest',
        data_type: 'String'
      }
    }
    sqs.send_message(
      queue_url: queue_url,
      message_body: JSON.pretty_generate(data),
      message_attributes: attributes
    )

    puts "job added to queue: #{queue_name}"
  end

  def helps
    <<~HELP
      To update a job in DynamoDB run:
      bundle exec exe/update_dynamodb_job job_id
    HELP
  end

  # this should really not exist in here, cross module dependencies
  def log
    NullLogger.new
  end

  def timestamp_for_now
    Time.now.getgm.strftime '%FT%TZ'
  end
end

UpdateDyanmodbJob.new.run!
